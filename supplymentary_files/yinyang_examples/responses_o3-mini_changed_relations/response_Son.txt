Below is one acceptable answer and an explanation of how it was “learned” from the data. (Note that there is an apparent mismatch between the label “Son” and the training examples—in our ontology every one of the eight positive examples is explicitly a Female while the two negative examples are Male. In many DL‐learner experiments the learned complex expression reflects the distinguishing gender; so if the intended target were “son” one would expect males. In our case the positives “behave” like daughters. One reasonable answer is therefore to “learn” the concept as

  kb:Female and (kb:hasSibling some Thing)

which in effect picks out exactly those individuals that are known to be female (that is, not male) and that have at least one sibling. (In a “complete” ontology one would expect that every child has at least one sibling or parent; nevertheless, DL‐Learner often adds an extra “has …” restriction.) 

For example, note that:
  • kb:Serena, kb:Ombretta, kb:Valentina, kb:Milly, kb:Antonella, kb:Marisella, kb:Giovanna, and kb:Nella are all explicitly asserted to be in kb:Female and each has at least one kb:hasSibling relationship.
  • kb:Luigi and kb:Dino are asserted to be kb:Male and so do not satisfy the female condition.

Thus, if due to a labelling mix‐up the given examples are meant to serve as “daughter” examples (or as the complement of “son”), one acceptable “complex class expression for Son” is to say that a non–son is exactly any individual that is female and has a sibling. (Alternatively, if one wishes to define son by “male‐hood” the analogous learned expression would be “kb:Male and (kb:hasSibling some Thing)”—but that does not fit the positive/negative examples shown above.)

So one acceptable answer is:

  kb:Female and (kb:hasSibling some Thing)

Keep in mind that when using DL‐Learner the “final” expression depends on which properties in the ontology happen to “explain” the differences between the positive and negative examples. In our case the only distinguishing feature is the asserted gender (with a “hasSibling” clause added automatically), so the above expression is a valid complex class expression derived in Manchester syntax.