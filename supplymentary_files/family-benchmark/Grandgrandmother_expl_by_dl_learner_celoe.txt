// declare some prefixes to use as abbreviations
prefixes = [ ("ex","http://www.benchmark.org/family#") ]

// knowledge source definition
ks.type = "OWL File"
ks.fileName = "family-benchmark.owl"

// reasoner
reasoner.type = "closed world reasoner"
reasoner.sources = { ks }

// CELOE
/*
alg.type = "celoe"
alg.terminateOnNoiseReached = true
*/

// OCEL
alg.type = "ocel"

// ELTL
// alg.type = "eltl"

// learning problem
lp.type = "posNegStandard"
lp.positiveExamples = { 
"ex:F2F19"
,"ex:F2F28"
,"ex:F2F10"
,"ex:F3F46"
,"ex:F3F42"
,"ex:F3F41"
,"ex:F5F61"
,"ex:F6F93"
,"ex:F6F70"
,"ex:F7F106"
,"ex:F7F121"
,"ex:F7F105"
,"ex:F7F103"
,"ex:F8F133"
,"ex:F9F141"
,"ex:F9F140"
,"ex:F10F172"
}

lp.negativeExamples = {
"ex:F10M196"
,"ex:F9M149"
,"ex:F6M73"
,"ex:F7M102"
,"ex:F10F191"
,"ex:F2F24"
,"ex:F8M138"
,"ex:F2F33"
,"ex:F2M39"
,"ex:F6F77"
,"ex:F1M4"
,"ex:F10F198"
,"ex:F9F156"
,"ex:F10F174"
,"ex:F5M66"
,"ex:F10M176"
,"ex:F2F22"
}
DL-Learner command line interface
Initializing component 'ks' of type OWL File ...
... initialized component 'ks' in 1ms. Status: OK
Initializing component 'reasoner' of type closed world reasoner ...
Loaded reasoner: Pellet (com.clarkparsia.pellet.owlapiv3.PelletReasoner)
Materializing TBox...
materialising concepts

[.....] 0%
[.....] 14%
[=....] 28%materialising object properties ...

[==...] 42%
[==...] 57%
[===..] 71%
[====.] 85%materialising datatype properties
...TBox materialised in 76 ms.
... initialized component 'reasoner' in 637ms. Status: OK
Initializing component 'lp' of type PosNegLPStandard ...
... initialized component 'lp' in 1ms. Status: OK
Initializing component 'alg' of type OWL Class Expression Learner ...
... initialized component 'alg' in 37ms. Status: OK
Running algorithm instance "alg" (OCEL)
starting top down refinement with: Thing (50% accuracy)
more accurate (76.47%) class expression found: Female
more accurate (82.35%) class expression found: Female and (hasChild some Thing)
more accurate (94.12%) class expression found: Female and (hasChild some (hasChild some Thing))
more accurate (100.00%) class expression found: Female and (hasChild some (hasChild some (married some Thing)))
Maximum time (10 seconds) reached, stopping now...
solutions (at most 20 are shown):
1: Female and (hasChild some (hasChild some (hasChild some Thing))) (accuracy 100%, length 9, depth 3)
2: Female and (hasChild some (hasChild some (married some Thing))) (accuracy 100%, length 9, depth 3)
3: Female and (hasChild some (hasChild some (married some Person))) (accuracy 100%, length 9, depth 3)
4: Female and (hasChild some (hasChild some (hasChild some Person))) (accuracy 100%, length 9, depth 3)
5: Female and (hasChild some (hasChild some (married some (hasChild some Thing)))) (accuracy 100%, length 11, depth 4)
6: Female and (hasChild some (hasChild some (married some (married some Thing)))) (accuracy 100%, length 11, depth 4)
7: Female and (hasChild some (hasChild some (hasChild some (hasParent some Thing)))) (accuracy 100%, length 11, depth 4)
8: Female and Person and (hasChild some (hasChild some (married some Thing))) (accuracy 100%, length 11, depth 3)
9: Female and (hasChild some (Person and (hasChild some (married some Thing)))) (accuracy 100%, length 11, depth 3)
10: Female and (hasChild some (hasChild some (Person and (married some Thing)))) (accuracy 100%, length 11, depth 3)
11: Female and (hasChild some (hasChild some (married some (Person or Person)))) (accuracy 100%, length 11, depth 3)
12: Female and (hasChild some (hasChild some (married some (hasChild only Thing)))) (accuracy 100%, length 11, depth 4)
13: Female and (hasChild some (hasChild some (married some (hasParent only Thing)))) (accuracy 100%, length 11, depth 4)
14: Female and (hasChild some (hasChild some (married some (hasSibling only Thing)))) (accuracy 100%, length 11, depth 4)
15: Female and (hasChild some (hasChild some (married some (married only Thing)))) (accuracy 100%, length 11, depth 4)
16: Female and Person and (hasChild some (hasChild some (hasChild some Thing))) (accuracy 100%, length 11, depth 3)
17: Female and (hasChild some (Person and (hasChild some (hasChild some Thing)))) (accuracy 100%, length 11, depth 3)
18: Female and (hasChild some (hasChild some (Person and (hasChild some Thing)))) (accuracy 100%, length 11, depth 3)
19: Female and (hasChild some (hasChild some (hasChild some (Person or Person)))) (accuracy 100%, length 11, depth 3)
20: Female and (hasChild some (hasChild some (hasChild some (hasChild only Thing)))) (accuracy 100%, length 11, depth 4)
Algorithm stopped (38931 descriptions tested).

