To determine the complex class expression for "Son" based on the given positive and negative examples, we need to analyze the relationships and properties that are common among the positive examples but not present in the negative examples. 

### Analysis:

1. **Common Characteristics of Positive Examples:**
   - All positive examples are instances of the class `Male`.
   - Many of the positive examples have a `hasParent` relationship, indicating they are children of someone.
   - Some positive examples have a `hasSibling` relationship, but this is not exclusive to sons.

2. **Common Characteristics of Negative Examples:**
   - The negative examples include both males and females.
   - Some negative examples have a `married` relationship, which is not typical for the class "Son" as it focuses on the child relationship.
   - Some negative examples have a `hasChild` relationship, which is not typical for the class "Son".

### Complex Class Expression:

Based on the analysis, the complex class expression for "Son" can be constructed as follows:

- **Class:** `Male` (since all positive examples are male)
- **Relationship:** `hasParent some Thing` (indicating that the individual is a child of someone)

Thus, the complex class expression for "Son" is:

```plaintext
Male and (hasParent some Thing)
```

This expression captures the essence of being a "Son" by ensuring the individual is male and has a parent, which aligns with the characteristics of the positive examples and excludes the negative examples.