// declare some prefixes to use as abbreviations
prefixes = [ ("ex","http://www.benchmark.org/family#") ]

// knowledge source definition
ks.type = "OWL File"
ks.fileName = "family-benchmark.owl"

// reasoner
reasoner.type = "closed world reasoner"
reasoner.sources = { ks }

// CELOE
/*
alg.type = "celoe"
alg.terminateOnNoiseReached = true
*/

// OCEL
alg.type = "ocel"

// ELTL
// alg.type = "eltl"

// learning problem
lp.type = "posNegStandard"
lp.positiveExamples = { 
"ex:F2M18"
,"ex:F2M25"
,"ex:F2M23"
,"ex:F2M32"
,"ex:F2M35"
,"ex:F3M51"
,"ex:F3M47"
,"ex:F5M68"
,"ex:F6M75"
,"ex:F6M99"
,"ex:F7M112"
,"ex:F7M110"
,"ex:F7M113"
,"ex:F7M117"
,"ex:F7M125"
,"ex:F7M123"
,"ex:F7M131"
,"ex:F8M138"
,"ex:F9M147"
,"ex:F9M155"
,"ex:F9M161"
,"ex:F9M166"
,"ex:F10M190"
,"ex:F10M199"
}

lp.negativeExamples = {
"ex:F3M45"
,"ex:F6M85"
,"ex:F10F192"
,"ex:F6F70"
,"ex:F7M115"
,"ex:F10M197"
,"ex:F5F65"
,"ex:F2F17"
,"ex:F9M170"
,"ex:F9M144"
,"ex:F3F53"
,"ex:F2F36"
,"ex:F6M92"
,"ex:F3M43"
,"ex:F8M134"
,"ex:F9F141"
,"ex:F9M142"
,"ex:F9F148"
,"ex:F10M184"
,"ex:F10F198"
,"ex:F3F49"
,"ex:F8M132"
,"ex:F2F30"
,"ex:F10F193"
}
DL-Learner command line interface
Initializing component 'ks' of type OWL File ...
... initialized component 'ks' in 1ms. Status: OK
Initializing component 'reasoner' of type closed world reasoner ...
Loaded reasoner: Pellet (com.clarkparsia.pellet.owlapiv3.PelletReasoner)
Materializing TBox...
materialising concepts

[.....] 0%
[.....] 14%
[=....] 28%materialising object properties ...

[==...] 42%
[==...] 57%
[===..] 71%
[====.] 85%materialising datatype properties
...TBox materialised in 72 ms.
... initialized component 'reasoner' in 632ms. Status: OK
Initializing component 'lp' of type PosNegLPStandard ...
... initialized component 'lp' in 1ms. Status: OK
Initializing component 'alg' of type OWL Class Expression Learner ...
... initialized component 'alg' in 38ms. Status: OK
Running algorithm instance "alg" (OCEL)
starting top down refinement with: Thing (50% accuracy)
more accurate (75.00%) class expression found: Male
more accurate (87.50%) class expression found: Male and (hasParent some Thing)
more accurate (91.67%) class expression found: Male and (hasParent some (hasParent some Thing))
more accurate (100.00%) class expression found: Male and (hasParent some (hasParent some (hasParent some Thing)))
Maximum time (10 seconds) reached, stopping now...
solutions (at most 20 are shown):
1: Male and (hasParent some (hasParent some (hasParent some Thing))) (accuracy 100%, length 9, depth 3)
2: Male and (hasParent some (hasParent some (hasParent some Person))) (accuracy 100%, length 9, depth 3)
3: Male and (hasParent some (hasParent some (hasParent some Female))) (accuracy 100%, length 9, depth 3)
4: Male and (hasParent some (hasParent some (hasParent some Male))) (accuracy 100%, length 9, depth 3)
5: Male and (hasParent some (hasParent some (hasParent some (not (Female))))) (accuracy 100%, length 10, depth 3)
6: Male and (hasParent some (hasParent some (hasParent some (not (Male))))) (accuracy 100%, length 10, depth 3)
7: Male and (hasParent some (hasParent some (hasParent some (hasChild some Thing)))) (accuracy 100%, length 11, depth 4)
8: Male and (hasParent some (hasParent some (hasParent some (married some Thing)))) (accuracy 100%, length 11, depth 4)
9: Male and (hasParent some (hasParent some (hasParent min 2 Thing))) (accuracy 100%, length 10, depth 3)
10: Male and Person and (hasParent some (hasParent some (hasParent some Thing))) (accuracy 100%, length 11, depth 3)
11: Male and (hasParent some (Person and (hasParent some (hasParent some Thing)))) (accuracy 100%, length 11, depth 3)
12: Male and (hasParent some (hasParent some (Person and (hasParent some Thing)))) (accuracy 100%, length 11, depth 3)
13: Male and (hasParent some (hasParent some (hasParent some (Person or Person)))) (accuracy 100%, length 11, depth 3)
14: Male and (hasParent some (hasParent some (hasParent some (hasChild only Thing)))) (accuracy 100%, length 11, depth 4)
15: Male and (hasParent some (hasParent some (hasParent some (hasParent only Thing)))) (accuracy 100%, length 11, depth 4)
16: Male and (hasParent some (hasParent some (hasParent some (hasSibling only Thing)))) (accuracy 100%, length 11, depth 4)
17: Male and (hasParent some (hasParent some (hasParent some (married only Thing)))) (accuracy 100%, length 11, depth 4)
18: Male and (hasParent some (hasParent some (hasParent some (married some Person)))) (accuracy 100%, length 11, depth 4)
19: Male and (hasParent some (hasParent some (hasParent some (married some Female)))) (accuracy 100%, length 11, depth 4)
20: Male and (hasParent some (hasParent some (hasParent some (married some Male)))) (accuracy 100%, length 11, depth 4)
Algorithm stopped (26525 descriptions tested).

