// declare some prefixes to use as abbreviations
prefixes = [ ("ex","http://www.benchmark.org/family#") ]

// knowledge source definition
ks.type = "OWL File"
ks.fileName = "family-benchmark.owl"

// reasoner
reasoner.type = "closed world reasoner"
reasoner.sources = { ks }

// CELOE
/*
alg.type = "celoe"
alg.terminateOnNoiseReached = true
*/

// OCEL
alg.type = "ocel"

// ELTL
// alg.type = "eltl"

// learning problem
lp.type = "posNegStandard"
lp.positiveExamples = { 
"ex:F1M1"
,"ex:F2M11"
,"ex:F2M21"
,"ex:F2M20"
,"ex:F2M31"
,"ex:F2M29"
,"ex:F2M9"
,"ex:F3M47"
,"ex:F3M45"
,"ex:F3M43"
,"ex:F3M40"
,"ex:F4M54"
,"ex:F5M64"
,"ex:F5M60"
,"ex:F6M71"
,"ex:F6M78"
,"ex:F6M85"
,"ex:F6M95"
,"ex:F6M92"
,"ex:F6M69"
,"ex:F7M109"
,"ex:F7M107"
,"ex:F7M123"
,"ex:F7M122"
,"ex:F7M104"
,"ex:F7M102"
,"ex:F8M134"
,"ex:F8M132"
,"ex:F9M144"
,"ex:F9M142"
,"ex:F9M157"
,"ex:F9M139"
,"ex:F10M187"
,"ex:F10M196"
,"ex:F10M171"
}

lp.negativeExamples = {
"ex:F10M182"
,"ex:F2M39"
,"ex:F10M190"
,"ex:F2M27"
,"ex:F7F103"
,"ex:F3F41"
,"ex:F7M115"
,"ex:F10F181"
,"ex:F9F140"
,"ex:F10F177"
,"ex:F10M202"
,"ex:F2F22"
,"ex:F3F49"
,"ex:F9M146"
,"ex:F3F46"
,"ex:F9F148"
,"ex:F2F17"
,"ex:F5F67"
,"ex:F3M51"
,"ex:F6F89"
,"ex:F2F30"
,"ex:F6F101"
,"ex:F9F168"
,"ex:F10F175"
,"ex:F1M6"
,"ex:F2M37"
,"ex:F6M99"
,"ex:F1F3"
,"ex:F5F62"
,"ex:F10F193"
,"ex:F3M50"
,"ex:F5M68"
,"ex:F7M110"
,"ex:F10F174"
,"ex:F6M73"
}
DL-Learner command line interface
Initializing component 'ks' of type OWL File ...
... initialized component 'ks' in 1ms. Status: OK
Initializing component 'reasoner' of type closed world reasoner ...
Loaded reasoner: Pellet (com.clarkparsia.pellet.owlapiv3.PelletReasoner)
Materializing TBox...
materialising concepts

[.....] 0%
[.....] 14%
[=....] 28%materialising object properties ...

[==...] 42%
[==...] 57%
[===..] 71%
[====.] 85%materialising datatype properties
...TBox materialised in 74 ms.
... initialized component 'reasoner' in 620ms. Status: OK
Initializing component 'lp' of type PosNegLPStandard ...
... initialized component 'lp' in 0ms. Status: OK
Initializing component 'alg' of type OWL Class Expression Learner ...
... initialized component 'alg' in 37ms. Status: OK
Running algorithm instance "alg" (OCEL)
starting top down refinement with: Thing (50% accuracy)
more accurate (78.57%) class expression found: Male
more accurate (90.00%) class expression found: Male and (hasChild some Thing)
more accurate (100.00%) class expression found: Male and (hasChild some (hasChild some Thing))
Maximum time (10 seconds) reached, stopping now...
solutions (at most 20 are shown):
1: Male and (hasChild some (hasChild some Thing)) (accuracy 100%, length 7, depth 2)
2: Male and (hasChild some (hasChild some Person)) (accuracy 100%, length 7, depth 2)
3: Male and (hasChild some (hasChild some (hasParent some Thing))) (accuracy 100%, length 9, depth 3)
4: Male and Person and (hasChild some (hasChild some Thing)) (accuracy 100%, length 9, depth 2)
5: Male and (hasChild some (Person and (hasChild some Thing))) (accuracy 100%, length 9, depth 2)
6: Male and (hasChild some (hasChild some (Person or Person))) (accuracy 100%, length 9, depth 2)
7: Male and (hasChild some (hasChild some (hasChild only Thing))) (accuracy 100%, length 9, depth 3)
8: Male and (hasChild some (hasChild some (hasParent only Thing))) (accuracy 100%, length 9, depth 3)
9: Male and (hasChild some (hasChild some (hasSibling only Thing))) (accuracy 100%, length 9, depth 3)
10: Male and (hasChild some (hasChild some (married only Thing))) (accuracy 100%, length 9, depth 3)
11: Male and (not (Female)) and (hasChild some (hasChild some Thing)) (accuracy 100%, length 10, depth 2)
12: Male and (hasChild some Thing) and (hasChild some (hasChild some Thing)) (accuracy 100%, length 11, depth 2)
13: Male and (hasChild some ((hasChild some Thing) and (hasChild some Thing))) (accuracy 100%, length 11, depth 2)
14: Male and (hasChild some ((hasChild some Thing) and (hasParent some Thing))) (accuracy 100%, length 11, depth 2)
15: Male and (hasChild some ((hasChild some Thing) and (married some Thing))) (accuracy 100%, length 11, depth 2)
16: Male and (hasChild some (hasChild some Thing)) and (married some Thing) (accuracy 100%, length 11, depth 2)
17: Male and (hasChild some (hasChild some (Person or (not (Female))))) (accuracy 100%, length 10, depth 2)
18: Male and (hasChild some (hasChild some (Person or (not (Male))))) (accuracy 100%, length 10, depth 2)
19: Male and (hasChild some (hasChild some (Person or (hasChild some Thing)))) (accuracy 100%, length 11, depth 3)
20: Male and (hasChild some (hasChild some (Person or (hasParent some Thing)))) (accuracy 100%, length 11, depth 3)
Algorithm stopped (29622 descriptions tested).

