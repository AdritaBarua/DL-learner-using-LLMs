prefixes = [ ("kb","http://example.com/trains#") ]

ks.type = "OWL File"
ks.fileName = "trains2.owl"

reasoner.type = "closed world reasoner"
reasoner.sources = { ks }

lp.type = "posNegStandard"
lp.positiveExamples = {"kb:west6", "kb:west8", "kb:west10"}
lp.negativeExamples = {"kb:west7", "kb:west9"}

// Common properties: not Jagged car and not Double car
alg.type = "ocel"
//alg.maxExecutionTimeInSeconds = 10

DL-Learner command line interface
Initializing component 'ks' of type OWL File ...
... initialized component 'ks' in 2ms. Status: OK
Initializing component 'reasoner' of type closed world reasoner ...
Loaded reasoner: Pellet (com.clarkparsia.pellet.owlapiv3.PelletReasoner)
Materializing TBox...
materialising concepts

[.....] 0%
[.....] 7%
[.....] 14%
[=....] 21%
[=....] 28%
[=....] 35%
[==...] 42%
[==...] 50%
[==...] 57%materialising object properties ...

[===..] 64%
[===..] 71%
[===..] 78%
[====.] 85%
[====.] 92%materialising datatype properties
...TBox materialised in 58 ms.
... initialized component 'reasoner' in 462ms. Status: OK
Initializing component 'lp' of type PosNegLPStandard ...
... initialized component 'lp' in 0ms. Status: OK
Initializing component 'alg' of type OWL Class Expression Learner ...
... initialized component 'alg' in 46ms. Status: OK
Running algorithm instance "alg" (OCEL)
starting top down refinement with: Thing (60% accuracy)
more accurate (80.00%) class expression found: hasCar max 3 Thing
more accurate (100.00%) class expression found: hasCar max 2 Thing
Maximum time (10 seconds) reached, stopping now...
solutions (at most 20 are shown):
1: hasCar max 2 Thing (accuracy 100%, length 4, depth 1)
2: hasCar max 2 ClosedCar (accuracy 100%, length 4, depth 1)
3: hasCar max 1 ClosedCar (accuracy 100%, length 4, depth 1)
4: hasCar max 2 DoubleCar (accuracy 100%, length 4, depth 1)
5: hasCar max 1 DoubleCar (accuracy 100%, length 4, depth 1)
6: hasCar max 2 JaggedCar (accuracy 100%, length 4, depth 1)
7: hasCar max 1 JaggedCar (accuracy 100%, length 4, depth 1)
8: hasCar max 2 LongCar (accuracy 100%, length 4, depth 1)
9: hasCar max 1 LongCar (accuracy 100%, length 4, depth 1)
10: hasCar max 2 OpenCar (accuracy 100%, length 4, depth 1)
11: hasCar max 2 ShortCar (accuracy 100%, length 4, depth 1)
12: hasCar max 1 ShortCar (accuracy 100%, length 4, depth 1)
13: hasCar max 2 (not (ClosedCar)) (accuracy 100%, length 5, depth 1)
14: hasCar max 2 (not (DoubleCar)) (accuracy 100%, length 5, depth 1)
15: hasCar max 2 (not (JaggedCar)) (accuracy 100%, length 5, depth 1)
16: hasCar max 2 (not (LongCar)) (accuracy 100%, length 5, depth 1)
17: hasCar max 2 (not (OpenCar)) (accuracy 100%, length 5, depth 1)
18: hasCar max 2 (not (ShortCar)) (accuracy 100%, length 5, depth 1)
19: hasCar max 2 (hasShape some Thing) (accuracy 100%, length 6, depth 2)
20: hasCar max 2 (load some Thing) (accuracy 100%, length 6, depth 2)
Algorithm stopped (48287 descriptions tested).

