prefixes = [ ("kb","http://example.com/trains#") ]

ks.type = "OWL File"
ks.fileName = "trains2.owl"

reasoner.type = "closed world reasoner"
reasoner.sources = { ks }

lp.type = "posNegStandard"
lp.positiveExamples = {"kb:west7", "kb:west9"}
lp.negativeExamples = {"kb:west6", "kb:west8", "kb:west10"}

// Common properties: has Double Car, Jagged car
alg.type = "ocel"
//alg.maxExecutionTimeInSeconds = 10

DL-Learner command line interface
Initializing component 'ks' of type OWL File ...
... initialized component 'ks' in 2ms. Status: OK
Initializing component 'reasoner' of type closed world reasoner ...
Loaded reasoner: Pellet (com.clarkparsia.pellet.owlapiv3.PelletReasoner)
Materializing TBox...
materialising concepts

[.....] 0%
[.....] 7%
[.....] 14%
[=....] 21%
[=....] 28%
[=....] 35%
[==...] 42%
[==...] 50%
[==...] 57%materialising object properties ...

[===..] 64%
[===..] 71%
[===..] 78%
[====.] 85%
[====.] 92%materialising datatype properties
...TBox materialised in 54 ms.
... initialized component 'reasoner' in 437ms. Status: OK
Initializing component 'lp' of type PosNegLPStandard ...
... initialized component 'lp' in 1ms. Status: OK
Initializing component 'alg' of type OWL Class Expression Learner ...
... initialized component 'alg' in 45ms. Status: OK
Running algorithm instance "alg" (OCEL)
starting top down refinement with: Thing (40% accuracy)
more accurate (100.00%) class expression found: hasCar some JaggedCar
Maximum time (10 seconds) reached, stopping now...
solutions (at most 20 are shown):
1: hasCar some JaggedCar (accuracy 100%, length 3, depth 1)
2: Train and (hasCar some JaggedCar) (accuracy 100%, length 5, depth 1)
3: hasCar some (JaggedCar and JaggedCar) (accuracy 100%, length 5, depth 1)
4: hasCar some (JaggedCar and LongCar) (accuracy 100%, length 5, depth 1)
5: (not (ClosedCar)) and (hasCar some JaggedCar) (accuracy 100%, length 6, depth 1)
6: (not (DoubleCar)) and (hasCar some JaggedCar) (accuracy 100%, length 6, depth 1)
7: (not (JaggedCar)) and (hasCar some JaggedCar) (accuracy 100%, length 6, depth 1)
8: (not (LongCar)) and (hasCar some JaggedCar) (accuracy 100%, length 6, depth 1)
9: (not (OpenCar)) and (hasCar some JaggedCar) (accuracy 100%, length 6, depth 1)
10: (not (Shape)) and (hasCar some JaggedCar) (accuracy 100%, length 6, depth 1)
11: (not (ShortCar)) and (hasCar some JaggedCar) (accuracy 100%, length 6, depth 1)
12: (hasCar some JaggedCar) and (hasCar some Thing) (accuracy 100%, length 7, depth 1)
13: hasCar some (JaggedCar and (not (ClosedCar))) (accuracy 100%, length 6, depth 1)
14: hasCar some (JaggedCar and (not (DoubleCar))) (accuracy 100%, length 6, depth 1)
15: hasCar some (JaggedCar and (not (OpenCar))) (accuracy 100%, length 6, depth 1)
16: hasCar some (JaggedCar and (not (ShortCar))) (accuracy 100%, length 6, depth 1)
17: hasCar some (JaggedCar and (hasShape some Thing)) (accuracy 100%, length 7, depth 2)
18: hasCar some (JaggedCar and (loadCount some Thing)) (accuracy 100%, length 7, depth 2)
19: hasCar some (JaggedCar and (wheels some Thing)) (accuracy 100%, length 7, depth 2)
20: (Car or Train) and (hasCar some JaggedCar) (accuracy 100%, length 7, depth 1)
Algorithm stopped (49737 descriptions tested).

